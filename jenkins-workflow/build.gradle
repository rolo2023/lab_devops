plugins {
  id "org.sonarqube" version "2.7.1"
}

apply plugin: 'groovy'
apply plugin: 'jacoco'

version = '3.1'

repositories {
    mavenCentral()
    maven {
        url "https://repo.jenkins-ci.org/public/"
    }
    maven {
        url "http://repo.jenkins-ci.org/releases/"
    }
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.13'
    compile(group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-step-api', version: '2.13') {
        artifact {
            name = 'workflow-step-api'
            type = 'jar'
        }
    }
    compile group: 'org.jenkins-ci', name: 'symbol-annotation', version: '1.5'
    compile group: 'org.eclipse.hudson', name: 'hudson-core', version: '3.2.1'
    compile group: 'org.jenkins-ci.main', name: 'jenkins-core', version: '2.19.1'
    compile(group: 'org.jenkins-ci.plugins', name: 'artifactory', version: '2.14.0'){
        artifact {
            name = 'artifactory'
            type = 'jar'
        }
    }
    compile(group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-cps', version: '2.13'){
        artifact {
            name = 'workflow-cps'
            type = 'jar'
        }
    }
    compileOnly group: 'org.jenkins-ci.main', name: 'jenkins-core', version: '2.19.1'
    compile(group: 'org.jenkins-ci.plugins', name: 'credentials-binding', version: '1.9') {
        artifact {
            name = 'credentials-binding'
            type = 'jar'
        }
    }

    // Needed by jenkins.model.Jenkins
    compile  group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'com.lesfurets', name:'jenkins-pipeline-unit', version:'1.0'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.4.1'
    testCompile group: 'org.yaml', name: 'snakeyaml', version: '1.22'
}

sourceSets {
    test {
        groovy { srcDirs = ['test'] }
        resources { srcDirs = [ 'resources', 'test/resources' ] }
    }
    main {
        groovy {
            srcDirs = [ 'src', 'vars' ]
        }
    }
    groovydoc {
        resources { srcDirs = [ 'src/'  ] }
    }
}

File destDocs = file("build/docs/$version")

groovydoc {
    docTitle = "Spring Workflowlibs $version"
    windowTitle = "Spring Workflowlibs Documentation"

    footer = """\
        <div class="custom-footer">
            GlobalDevOps (C) - Generated on: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
        </div>""".stripIndent()

    excludes = ["*Test*"]
    source = sourceSets.groovydoc.resources
    destinationDir = destDocs
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

sonarqube {
    properties {
        property "sonar.groovy.binaries", "${project.buildDir.name}${File.separator}classes"
        property "sonar.sources", "vars/,src/"
        property "sonar.inclusions", "**/*.groovy"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.issue.ignore.multicriteria", "e1,e2"
        property "sonar.issue.ignore.multicriteria.e1.ruleKey", "grvy:org.codenarc.rule.unused.UnusedPrivateMethodRule"
        property "sonar.issue.ignore.multicriteria.e1.resourceKey", "vars/*.groovy"
        property "sonar.issue.ignore.multicriteria.e2.ruleKey", "grvy:org.codenarc.rule.unused.UnusedVariableRule.fixed"
        property "sonar.issue.ignore.multicriteria.e2.resourceKey", "vars/*.groovy"
    }
}

task getVersion {
    group 'Verification'
    description 'Return Gradle Project Version'
    doLast {
        println(version)
    }
}

tasks.withType(GroovyCompile).configureEach {
    options.incremental = true
}
